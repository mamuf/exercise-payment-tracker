package cz.mamuf.test.paymenttracker.model;

/**
 * Payment record.
 */
public class Payment {

	private final Currency currency;
	private final int value;

	/**
	 * @throws IllegalArgumentException If payment cannot be parsed.
	 */
	public static Payment parsePayment(final String payment) {
		try {
			final int sepIdx = payment.indexOf(' ');
			final String currencySting = payment.substring(0, sepIdx);
			final String valueString = payment.substring(sepIdx + 1);
			return new Payment(new Currency(currencySting), Integer.parseInt(valueString));
		} catch (NumberFormatException | IndexOutOfBoundsException e) {
			throw new IllegalArgumentException("'" + payment + "'");
		}
	}

	public Payment(final Currency currency, final int value) {
		this.currency = currency;
		this.value = value;
	}

	public int getValue() {
		return value;
	}

	public Currency getCurrency() {
		return currency;
	}

	@Override
	public String toString() {
		return currency + " " + value;
	}

	/*
	 * Generated by Eclipse JDT.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((currency == null) ? 0 : currency.hashCode());
		result = prime * result + value;
		return result;
	}

	/*
	 * Generated by Eclipse JDT.
	 */
	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final Payment other = (Payment) obj;
		if (currency == null) {
			if (other.currency != null) {
				return false;
			}
		} else if (!currency.equals(other.currency)) {
			return false;
		}
		if (value != other.value) {
			return false;
		}
		return true;
	}

}
